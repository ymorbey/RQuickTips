[["index.html", "Quick R Tips &amp; Tricks Chapter 1 Preface", " Quick R Tips &amp; Tricks Yolanda Morbey 2024-11-22 Chapter 1 Preface This book is intended to show some simple tips and tricks to deal with common data issues encountered by beginners. "],["dates-and-times.html", "Chapter 2 Dates and times", " Chapter 2 Dates and times Load libraries. library(dplyr) # for data manipulation library(lubridate) # for date and time functions Here are some useful date and time functions. When using strptime, you will have to specify the date and time components. For help on the formats available, run ?strptime. # get current system date Sys.Date() ## [1] &quot;2024-11-22&quot; # get current system datetime, with the time zone Sys.time() ## [1] &quot;2024-11-22 14:30:14 EST&quot; # convert a character datetime to POSIXct # specify the components of the datetime when using strptime x &lt;- &quot;2024/11/15 12:00:00&quot; ( z &lt;- as.POSIXct(strptime(x, &quot;%Y/%m/%d %H:%M:%S&quot;)) ) ## [1] &quot;2024-11-15 12:00:00 EST&quot; class(z) # note the formats of z ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Adding date and time variables to a data frame is easy using lubridate functions. When calculating time differences, it is best to use the difftime function rather than straight subtraction. # first, let&#39;s make an example data frame (test) with a date variable formats today &lt;- as.POSIXct(Sys.time()) test &lt;- data.frame(date=seq(today,today+5*60,60)) class(test$date) # note the format ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; glimpse(test) # glimpse the data frame as a tibble ## Rows: 6 ## Columns: 1 ## $ date &lt;dttm&gt; 2024-11-22 14:30:14, 2024-11-22 14:31:14, 2024-11-22 14:32:14, 2… # now let&#39;s use lubridate functions to extract date &amp; time components test1 &lt;- test %&gt;% mutate(year = year(date), yday = yday(date), month = month(date), day = day(date), hour=hour(date), min=minute(date), sec=second(date), tomorrow=date+days(1)) %&gt;% mutate(difftime = difftime(tomorrow,date,units=&quot;hours&quot;), difftime_h = as.numeric(difftime)) test1 ## date year yday month day hour min sec tomorrow ## 1 2024-11-22 14:30:14 2024 327 11 22 14 30 14.51902 2024-11-23 14:30:14 ## 2 2024-11-22 14:31:14 2024 327 11 22 14 31 14.51902 2024-11-23 14:31:14 ## 3 2024-11-22 14:32:14 2024 327 11 22 14 32 14.51902 2024-11-23 14:32:14 ## 4 2024-11-22 14:33:14 2024 327 11 22 14 33 14.51902 2024-11-23 14:33:14 ## 5 2024-11-22 14:34:14 2024 327 11 22 14 34 14.51902 2024-11-23 14:34:14 ## 6 2024-11-22 14:35:14 2024 327 11 22 14 35 14.51902 2024-11-23 14:35:14 ## difftime difftime_h ## 1 24 hours 24 ## 2 24 hours 24 ## 3 24 hours 24 ## 4 24 hours 24 ## 5 24 hours 24 ## 6 24 hours 24 "],["sun-event-times.html", "Chapter 3 Sun event times", " Chapter 3 Sun event times Load libraries library(dplyr) # for data frame manipulation library(suntools) # for sunriset, crepuscule library(lubridate) # for date and time functions library(data.table) # for setDT Functions in suntools provide everthing you need to get sunrise, sunset, and other sun event times. One caveat is that these functions do not seem to perform well in dplyr. Therefore, we will 1) create a new variable using the assignment operator and 2) add the data table format to our data frame and then perform manipulations on the data table. It’s useful to look at an example before attempting these functions on your own data frame. # see example for sunriset example(sunriset) ## ## sunrst&gt; #Sunset in Ithaca, NY, USA on June 1, 2023 ## sunrst&gt; ## sunrst&gt; sunriset( ## sunrst+ matrix(c(-76.4511, 42.4800), nrow = 1), ## sunrst+ as.POSIXct(&quot;2023-06-01&quot;, tz = &quot;America/New_York&quot;), ## sunrst+ direction=&#39;sunset&#39;, ## sunrst+ POSIXct.out=TRUE ## sunrst+ ) ## day_frac time ## 1 0.858628 2023-06-01 20:36:25 Now let’s try suntools functions on a data frame. Be very careful with your time zones! # make example data frame (df) with dates, lat, and lon ( today &lt;- Sys.Date() ) # get today&#39;s date in UTC ## [1] &quot;2024-11-22&quot; # create a data frame with dates, and convert time to tz df &lt;- data.frame(date=as.POSIXct(seq(today,today+10,by=1),tz=&quot;EST&quot;), lat=42, lon=-80) # put lat and lon into a matrix coords &lt;- matrix(c(df$lon,df$lat),nrow=nrow(df)) # get sunrise in tz of df$date # here we are using the assignment operator, not dplyr functions df$sunrise &lt;- sunriset( coords, df$date, direction = c(&quot;sunrise&quot;), POSIXct.out = TRUE )$time # confirm that the tz is correct df$sunrise[1:6] ## [1] &quot;2024-11-21 07:17:48 EST&quot; &quot;2024-11-22 07:18:59 EST&quot; ## [3] &quot;2024-11-23 07:20:09 EST&quot; &quot;2024-11-24 07:21:19 EST&quot; ## [5] &quot;2024-11-25 07:22:27 EST&quot; &quot;2024-11-26 07:23:35 EST&quot; # get sunset in tz of df$date df$sunset &lt;- sunriset( coords, df$date, direction = c(&quot;sunset&quot;), POSIXct.out = TRUE )$time df$sunset[1:6] ## [1] &quot;2024-11-21 16:53:52 EST&quot; &quot;2024-11-22 16:53:14 EST&quot; ## [3] &quot;2024-11-23 16:52:39 EST&quot; &quot;2024-11-24 16:52:06 EST&quot; ## [5] &quot;2024-11-25 16:51:35 EST&quot; &quot;2024-11-26 16:51:06 EST&quot; As an alternative, we can add a data table format to the data frame and then use data table (dt) syntax for data manipulations. dt syntax works faster on large data sets. # add dt format to the data frame &amp; check setDT(df) class(df) ## [1] &quot;data.table&quot; &quot;data.frame&quot; # sunset in tz of df$date df[,sunrise1 := sunriset(matrix(c(lon, lat), ncol = 2, byrow = FALSE), date, POSIXct.out=T, direction=&#39;sunrise&#39;)[2]][] ## date lat lon sunrise sunset ## &lt;POSc&gt; &lt;num&gt; &lt;num&gt; &lt;POSc&gt; &lt;POSc&gt; ## 1: 2024-11-21 19:00:00 42 -80 2024-11-21 07:17:48 2024-11-21 16:53:52 ## 2: 2024-11-22 19:00:00 42 -80 2024-11-22 07:18:59 2024-11-22 16:53:14 ## 3: 2024-11-23 19:00:00 42 -80 2024-11-23 07:20:09 2024-11-23 16:52:39 ## 4: 2024-11-24 19:00:00 42 -80 2024-11-24 07:21:19 2024-11-24 16:52:06 ## 5: 2024-11-25 19:00:00 42 -80 2024-11-25 07:22:27 2024-11-25 16:51:35 ## 6: 2024-11-26 19:00:00 42 -80 2024-11-26 07:23:35 2024-11-26 16:51:06 ## 7: 2024-11-27 19:00:00 42 -80 2024-11-27 07:24:42 2024-11-27 16:50:40 ## 8: 2024-11-28 19:00:00 42 -80 2024-11-28 07:25:49 2024-11-28 16:50:16 ## 9: 2024-11-29 19:00:00 42 -80 2024-11-29 07:26:54 2024-11-29 16:49:54 ## 10: 2024-11-30 19:00:00 42 -80 2024-11-30 07:27:58 2024-11-30 16:49:35 ## 11: 2024-12-01 19:00:00 42 -80 2024-12-01 07:29:02 2024-12-01 16:49:18 ## sunrise1 ## &lt;POSc&gt; ## 1: 2024-11-21 07:17:48 ## 2: 2024-11-22 07:18:59 ## 3: 2024-11-23 07:20:09 ## 4: 2024-11-24 07:21:19 ## 5: 2024-11-25 07:22:27 ## 6: 2024-11-26 07:23:35 ## 7: 2024-11-27 07:24:42 ## 8: 2024-11-28 07:25:49 ## 9: 2024-11-29 07:26:54 ## 10: 2024-11-30 07:27:58 ## 11: 2024-12-01 07:29:02 # sunset in tz of df$date df[,sunset1 := sunriset(matrix(c(lon, lat), ncol = 2, byrow = FALSE), date, POSIXct.out=T, direction=&#39;sunset&#39;)[2]][] ## date lat lon sunrise sunset ## &lt;POSc&gt; &lt;num&gt; &lt;num&gt; &lt;POSc&gt; &lt;POSc&gt; ## 1: 2024-11-21 19:00:00 42 -80 2024-11-21 07:17:48 2024-11-21 16:53:52 ## 2: 2024-11-22 19:00:00 42 -80 2024-11-22 07:18:59 2024-11-22 16:53:14 ## 3: 2024-11-23 19:00:00 42 -80 2024-11-23 07:20:09 2024-11-23 16:52:39 ## 4: 2024-11-24 19:00:00 42 -80 2024-11-24 07:21:19 2024-11-24 16:52:06 ## 5: 2024-11-25 19:00:00 42 -80 2024-11-25 07:22:27 2024-11-25 16:51:35 ## 6: 2024-11-26 19:00:00 42 -80 2024-11-26 07:23:35 2024-11-26 16:51:06 ## 7: 2024-11-27 19:00:00 42 -80 2024-11-27 07:24:42 2024-11-27 16:50:40 ## 8: 2024-11-28 19:00:00 42 -80 2024-11-28 07:25:49 2024-11-28 16:50:16 ## 9: 2024-11-29 19:00:00 42 -80 2024-11-29 07:26:54 2024-11-29 16:49:54 ## 10: 2024-11-30 19:00:00 42 -80 2024-11-30 07:27:58 2024-11-30 16:49:35 ## 11: 2024-12-01 19:00:00 42 -80 2024-12-01 07:29:02 2024-12-01 16:49:18 ## sunrise1 sunset1 ## &lt;POSc&gt; &lt;POSc&gt; ## 1: 2024-11-21 07:17:48 2024-11-21 16:53:52 ## 2: 2024-11-22 07:18:59 2024-11-22 16:53:14 ## 3: 2024-11-23 07:20:09 2024-11-23 16:52:39 ## 4: 2024-11-24 07:21:19 2024-11-24 16:52:06 ## 5: 2024-11-25 07:22:27 2024-11-25 16:51:35 ## 6: 2024-11-26 07:23:35 2024-11-26 16:51:06 ## 7: 2024-11-27 07:24:42 2024-11-27 16:50:40 ## 8: 2024-11-28 07:25:49 2024-11-28 16:50:16 ## 9: 2024-11-29 07:26:54 2024-11-29 16:49:54 ## 10: 2024-11-30 07:27:58 2024-11-30 16:49:35 ## 11: 2024-12-01 07:29:02 2024-12-01 16:49:18 # confirm these are correct df$sunrise1[1:6] ## [1] &quot;2024-11-21 07:17:48 EST&quot; &quot;2024-11-22 07:18:59 EST&quot; ## [3] &quot;2024-11-23 07:20:09 EST&quot; &quot;2024-11-24 07:21:19 EST&quot; ## [5] &quot;2024-11-25 07:22:27 EST&quot; &quot;2024-11-26 07:23:35 EST&quot; df$sunset1[1:6] ## [1] &quot;2024-11-21 16:53:52 EST&quot; &quot;2024-11-22 16:53:14 EST&quot; ## [3] &quot;2024-11-23 16:52:39 EST&quot; &quot;2024-11-24 16:52:06 EST&quot; ## [5] &quot;2024-11-25 16:51:35 EST&quot; &quot;2024-11-26 16:51:06 EST&quot; Now let’s get crepuscular times: civil twilight: sun is 6 degrees below horizon nautical twilight: sun is 12 degrees below horizon astonomical twilight: sun is 18 degrees below horizon # astronomical twilight at dawn df$dawn = crepuscule( coords, df$date, solarDep=18, direction = c(&quot;dawn&quot;), POSIXct.out = TRUE )$time # astronomical twilight at dusk df$dusk = crepuscule( coords, df$date, solarDep=18, direction = c(&quot;dusk&quot;), POSIXct.out = TRUE )$time df$dawn[1:6] # confirm tz ## [1] &quot;2024-11-21 05:39:53 EST&quot; &quot;2024-11-22 05:40:53 EST&quot; ## [3] &quot;2024-11-23 05:41:53 EST&quot; &quot;2024-11-24 05:42:53 EST&quot; ## [5] &quot;2024-11-25 05:43:51 EST&quot; &quot;2024-11-26 05:44:50 EST&quot; df$dusk[1:6] ## [1] &quot;2024-11-21 18:31:51 EST&quot; &quot;2024-11-22 18:31:24 EST&quot; ## [3] &quot;2024-11-23 18:30:59 EST&quot; &quot;2024-11-24 18:30:36 EST&quot; ## [5] &quot;2024-11-25 18:30:15 EST&quot; &quot;2024-11-26 18:29:56 EST&quot; # keep variables of interest and view df1 &lt;- df %&gt;% select(date,lat,lon,sunrise,sunset,dawn,dusk) head(df1) ## date lat lon sunrise sunset ## &lt;POSc&gt; &lt;num&gt; &lt;num&gt; &lt;POSc&gt; &lt;POSc&gt; ## 1: 2024-11-21 19:00:00 42 -80 2024-11-21 07:17:48 2024-11-21 16:53:52 ## 2: 2024-11-22 19:00:00 42 -80 2024-11-22 07:18:59 2024-11-22 16:53:14 ## 3: 2024-11-23 19:00:00 42 -80 2024-11-23 07:20:09 2024-11-23 16:52:39 ## 4: 2024-11-24 19:00:00 42 -80 2024-11-24 07:21:19 2024-11-24 16:52:06 ## 5: 2024-11-25 19:00:00 42 -80 2024-11-25 07:22:27 2024-11-25 16:51:35 ## 6: 2024-11-26 19:00:00 42 -80 2024-11-26 07:23:35 2024-11-26 16:51:06 ## dawn dusk ## &lt;POSc&gt; &lt;POSc&gt; ## 1: 2024-11-21 05:39:53 2024-11-21 18:31:51 ## 2: 2024-11-22 05:40:53 2024-11-22 18:31:24 ## 3: 2024-11-23 05:41:53 2024-11-23 18:30:59 ## 4: 2024-11-24 05:42:53 2024-11-24 18:30:36 ## 5: 2024-11-25 05:43:51 2024-11-25 18:30:15 ## 6: 2024-11-26 05:44:50 2024-11-26 18:29:56 "],["maps.html", "Chapter 4 Maps", " Chapter 4 Maps This is a placeholder for material to come. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
